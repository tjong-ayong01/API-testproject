{
	"info": {
		"_postman_id": "5a80fb37-ea6d-4e63-aaf4-0236b434b969",
		"name": "NHG Petstore",
		"description": "This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.\n\nContact Support:\n Email: apiteam@swagger.io",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "10707316"
	},
	"item": [
		{
			"name": "pet",
			"item": [
				{
					"name": "Add a new pet to the store",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('id', 'category', 'name', 'photoUrls', 'tags', 'status');",
									"    ",
									"    pm.expect(responseData.category).to.be.an('object').that.has.all.keys('id', 'name');",
									"    ",
									"    pm.expect(responseData.photoUrls).to.be.an('array');",
									"    pm.expect(responseData.tags).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Category name is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.category).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.category.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Category name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"PhotoUrls is an array with at least one non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('photoUrls').that.is.an('array').with.length.of.at.least(1);",
									"    responseData.photoUrls.forEach(function(url) {",
									"        pm.expect(url).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Tags array contains objects with non-empty name and valid id\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.tags).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.tags.forEach(tag => {",
									"        pm.expect(tag).to.be.an('object');",
									"        pm.expect(tag.id).to.be.a('number').that.is.at.least(0);",
									"        pm.expect(tag.name).to.be.a('string').that.is.not.empty;",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "read:pets write:pets",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://petstore.swagger.io/oauth/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "implicit",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "<token>",
								"description": "Added as a part of security scheme: oauth2"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\"id\": 12345,\n\"category\": {\n\"id\": 1,\n\"name\": \"Dogs\"\n},\n\"name\": \"Buddy\",\n\"photoUrls\": [\"https://example.com/photo1.jpg\"],\n\"tags\": [\n{\n\"id\": 1,\n\"name\": \"friendly\"\n}\n],\n\"status\": \"available\"\n}\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				},
				{
					"name": "Find pet by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response matches the expected schema\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('id', 'category', 'name', 'photoUrls', 'tags', 'status');",
									"",
									"    pm.expect(responseData.category).to.be.an('object').that.has.all.keys('id', 'name');",
									"    ",
									"    pm.expect(responseData.photoUrls).to.be.an('array');",
									"    responseData.photoUrls.forEach(url => {",
									"        pm.expect(url).to.be.a('string').that.is.not.empty;",
									"    });",
									"",
									"    pm.expect(responseData.tags).to.be.an('array');",
									"    responseData.tags.forEach(tag => {",
									"        pm.expect(tag).to.be.an('object').that.has.all.keys('id', 'name');",
									"    });",
									"",
									"    pm.expect(responseData.status).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Response contains Category and Tags\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('id', 'category', 'name', 'photoUrls', 'tags', 'status');",
									"    ",
									"    pm.expect(responseData.category).to.exist;",
									"    pm.expect(responseData.tags).to.exist.and.to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Name and Status must be non-empty strings\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"    pm.expect(responseData.status).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/:petId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								":petId"
							],
							"variable": [
								{
									"key": "petId",
									"value": "123",
									"description": "(Required) ID of pet to return"
								}
							]
						},
						"description": "Returns a single pet"
					},
					"response": []
				},
				{
					"name": "Finds Pets by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Response matches the expected schema for pet objects\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.forEach(pet => {",
									"        pm.expect(pet).to.be.an('object').that.includes.all.keys('id', 'category', 'name', 'photoUrls', 'tags', 'status');",
									"        ",
									"        pm.expect(pet.id).to.be.a('number').that.is.at.least(0);",
									"        pm.expect(pet.name).to.be.a('string');",
									"        pm.expect(pet.photoUrls).to.be.an('array').that.is.not.empty;",
									"        pm.expect(pet.status).to.be.a('string');",
									"        ",
									"        pm.expect(pet.category).to.be.an('object').that.includes.all.keys('id', 'name');",
									"        pm.expect(pet.category.id).to.be.a('number').that.is.at.least(0);",
									"        pm.expect(pet.category.name).to.be.a('string');",
									"        ",
									"        pet.tags.forEach(tag => {",
									"            pm.expect(tag).to.be.an('object').that.includes.all.keys('id', 'name');",
									"            pm.expect(tag.id).to.be.a('number').that.is.at.least(0);",
									"            pm.expect(tag.name).to.be.a('string');",
									"        });",
									"    });",
									"});",
									"",
									"pm.test(\"All elements in the response array have a valid 'status' field\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(function(item) {",
									"        pm.expect(item).to.have.property('status').that.is.a('string').and.is.not.empty;",
									"    });",
									"});",
									"",
									"pm.test(\"photoUrls is an array and contains at least one valid URL string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"    responseData.forEach(pet => {",
									"        pm.expect(pet.photoUrls).to.be.an('array').that.is.not.empty;",
									"        pet.photoUrls.forEach(url => {",
									"            pm.expect(url).to.be.a('string').and.to.match(/^https?:\\/\\/.+/); // Basic URL format check",
									"        });",
									"    });",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "read:pets write:pets",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://petstore.swagger.io/oauth/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "implicit",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/pet/findByStatus?status=available&status=available",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet",
								"findByStatus"
							],
							"query": [
								{
									"key": "status",
									"value": "available",
									"description": "(Required) Status values that need to be considered for filter"
								},
								{
									"key": "status",
									"value": "available",
									"description": "(Required) Status values that need to be considered for filter"
								}
							]
						},
						"description": "Multiple status values can be provided with comma separated strings"
					},
					"response": []
				},
				{
					"name": "Update an existing pet",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has the required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('id', 'category', 'name', 'photoUrls', 'tags', 'status');",
									"    pm.expect(responseData.category).to.have.all.keys('id', 'name');",
									"    pm.expect(responseData.photoUrls).to.be.an('array');",
									"    pm.expect(responseData.tags).to.be.an('array');",
									"});",
									"",
									"",
									"pm.test(\"Validate the structure of the category object\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.category).to.exist.and.to.be.an('object');",
									"    pm.expect(responseData.category).to.have.all.keys('id', 'name');",
									"    pm.expect(responseData.category.id).to.be.a('number');",
									"    pm.expect(responseData.category.name).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Tags is an array with at least one element containing required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.tags).to.be.an('array').that.is.not.empty;",
									"    ",
									"    responseData.tags.forEach(tag => {",
									"        pm.expect(tag).to.be.an('object');",
									"        pm.expect(tag).to.have.all.keys('id', 'name');",
									"        pm.expect(tag.id).to.be.a('number');",
									"        pm.expect(tag.name).to.be.a('string').that.is.not.empty;",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Status is one of the expected values\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.status).to.be.oneOf(['available', 'pending', 'sold']);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "oauth2",
							"oauth2": [
								{
									"key": "scope",
									"value": "read:pets write:pets",
									"type": "string"
								},
								{
									"key": "authUrl",
									"value": "https://petstore.swagger.io/oauth/authorize",
									"type": "string"
								},
								{
									"key": "grant_type",
									"value": "implicit",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"doggie\",\n  \"photoUrls\": [\n    \"irure labore \",\n    \"in minim\"\n  ],\n  \"id\": -7361115,\n  \"category\": {\n    \"id\": -96914503,\n    \"name\": \"mollit i\"\n  },\n  \"tags\": [\n    {\n      \"id\": -35429768,\n      \"name\": \"incididunt ex exercitation\"\n    },\n    {\n      \"id\": 51954682,\n      \"name\": \"Lorem nisi dolor\"\n    }\n  ],\n  \"status\": \"pending\"\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/pet",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"pet"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "store",
			"item": [
				{
					"name": "Find purchase order by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response matches the expected schema\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('id', 'petId', 'quantity', 'shipDate', 'status', 'complete');",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number').and.to.be.within(1, 10);",
									"    pm.expect(responseData.petId).to.be.a('number').and.to.be.within(1, 10);",
									"    pm.expect(responseData.quantity).to.be.a('number').and.to.be.at.least(0);",
									"    pm.expect(responseData.shipDate).to.be.a('string');",
									"    pm.expect(responseData.status).to.be.a('string');",
									"    pm.expect(responseData.complete).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Validate that 'id', 'petId', and 'quantity' are integers within the specified range\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    [responseData.id, responseData.petId, responseData.quantity].forEach(value => {",
									"        pm.expect(value).to.be.a('number').and.to.satisfy(num => Number.isInteger(num) && num >= 1 && num <= 10, \"Value must be an integer between 1 and 10\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Complete should be a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.complete).to.exist.and.to.be.a('boolean');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/order/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"order",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "123",
									"description": "(Required) ID of pet that needs to be fetched"
								}
							]
						},
						"description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions"
					},
					"response": []
				},
				{
					"name": "Returns pet inventories by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response contains required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys(\"3000\", \"5000\", \"6000\", \"7000\", \"На месте\", \"totvs\", \"sold\", \"new\", \"string\", \"terminatorius\", \"pending\", \"available\", \"not-a-valid-status\", \"peric\", \"taken\", \"status\");",
									"});",
									"",
									"",
									"pm.test(\"All keys in the response are strings\", function () {",
									"    const responseData = pm.response.json();",
									"    pm.expect(responseData).to.be.an('object');",
									"",
									"    Object.keys(responseData).forEach(function(key) {",
									"        pm.expect(key).to.be.a('string');",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"All values in the response are non-negative integers\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"",
									"    Object.values(responseData).forEach(value => {",
									"        pm.expect(value).to.be.a('number').and.to.be.at.least(0, \"Value should be a non-negative integer\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "key",
									"value": "api_key",
									"type": "string"
								},
								{
									"key": "value",
									"value": "{{apiKey}}",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/store/inventory",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"store",
								"inventory"
							]
						},
						"description": "Returns a map of status codes to quantities"
					},
					"response": [
						{
							"name": "successful operation",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									},
									{
										"key": "api_key",
										"value": "<API Key>",
										"description": "Added as a part of security scheme: apikey"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/store/inventory",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"store",
										"inventory"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n  \"culpa_97\": -44876952,\n  \"deseruntc\": -85195068,\n  \"consequat_8\": 78536780,\n  \"inc\": -97161578\n}"
						}
					]
				}
			]
		},
		{
			"name": "user",
			"item": [
				{
					"name": "Create user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response Content-Type is application/json\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Response schema validation\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('code', 'type', 'message');",
									"    pm.expect(responseData.code).to.be.a('number');",
									"    pm.expect(responseData.type).to.be.a('string');",
									"    pm.expect(responseData.message).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Code is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.code).to.be.a('number').and.to.be.at.least(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 44576627,\n  \"username\": \"anim eiusmod\",\n  \"firstName\": \"tempor velit\",\n  \"lastName\": \"exercitation laborum ex\",\n  \"email\": \"in\",\n  \"password\": \"in id consectetur\",\n  \"phone\": \"consequat amet Duis labore qui\",\n  \"userStatus\": 67372159\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user"
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": []
				},
				{
					"name": "Get user by user name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response matches the expected schema\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('id', 'username', 'firstName', 'lastName', 'email', 'password', 'phone', 'userStatus');",
									"    ",
									"    pm.expect(responseData.id).to.be.a('number');",
									"    pm.expect(responseData.username).to.be.a('string');",
									"    pm.expect(responseData.firstName).to.be.a('string');",
									"    pm.expect(responseData.lastName).to.be.a('string');",
									"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
									"    pm.expect(responseData.password).to.be.a('string');",
									"    pm.expect(responseData.phone).to.be.a('string');",
									"    pm.expect(responseData.userStatus).to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"User ID is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.id).to.exist.and.to.be.a('number').and.to.be.at.least(0);",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.email).to.exist;",
									"",
									"    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;",
									"    pm.expect(responseData.email).to.match(emailRegex, \"Email format is invalid\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "anim eiusmod",
									"description": "(Required) The name that needs to be fetched. Use user1 for testing. "
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logs user into the system",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields: code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('code', 'type', 'message');",
									"});",
									"",
									"",
									"pm.test(\"Code is a number and equals 0\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.code).to.be.a('number').and.to.equal(0);",
									"});",
									"",
									"",
									"pm.test(\"The message must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/user/login?username=anim eiusmod&password=in id consectetur",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"login"
							],
							"query": [
								{
									"key": "username",
									"value": "anim eiusmod",
									"description": "(Required) The user name for login"
								},
								{
									"key": "password",
									"value": "in id consectetur",
									"description": "(Required) The password for login in clear text"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Logs out current logged in user session",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is in JSON format\", function () {",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
									"});",
									"",
									"",
									"pm.test(\"Validate response schema for code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('code', 'type', 'message');",
									"",
									"    pm.expect(responseData.code).to.be.a('number');",
									"    pm.expect(responseData.type).to.be.a('string');",
									"    pm.expect(responseData.message).to.be.a('string');",
									"});",
									"",
									"",
									"pm.test(\"Code is a number with expected value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.code).to.be.a('number').and.to.equal(0);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/logout",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Updated user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields: code, type, and message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('code', 'type', 'message');",
									"});",
									"",
									"",
									"pm.test(\"Code is a valid integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.code).to.be.a('number').and.to.satisfy(Number.isInteger, \"Code should be an integer\");",
									"});",
									"",
									"",
									"pm.test(\"Type must be a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.type).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"id\": 44576627,\n  \"username\": \"anim eiusmod\",\n  \"firstName\": \"tempor velit\",\n  \"lastName\": \"exercitation laborum ex\",\n  \"email\": \"in\",\n  \"password\": \"in id consectetur\",\n  \"phone\": \"consequat amet Duis labore qui\",\n  \"userStatus\": 67372159\n}",
							"options": {
								"raw": {
									"headerFamily": "json",
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "anim eiusmod",
									"description": "(Required) name that need to be updated"
								}
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": []
				},
				{
					"name": "Delete user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"",
									"pm.test(\"Response has required fields\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData).to.have.all.keys('code', 'type', 'message');",
									"});",
									"",
									"",
									"pm.test(\"Code is of type integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.code).to.be.a('number');",
									"});",
									"",
									"",
									"pm.test(\"Type is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('type').that.is.a('string').and.to.have.lengthOf.at.least(1, \"Type should not be empty\");",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/user/:username",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"user",
								":username"
							],
							"variable": [
								{
									"key": "username",
									"value": "anim eiusmod",
									"description": "(Required) The name that needs to be deleted"
								}
							]
						},
						"description": "This can only be done by the logged in user."
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://petstore.swagger.io/v2"
		}
	]
}